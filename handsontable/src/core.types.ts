import { SettingsPure } from "./3rdparty/walkontable/src/settings";
import { CellCoords } from "./base";
import { DataMapSettings, PropDescriptor } from "./dataMap/types";
import { CellProperties } from "./editors/types";
import { IndexMapper } from "./translations";
import { Selection } from "./selection";

export interface GridSettings extends SettingsPure {
  currentHeaderClassName: string;
  activeHeaderClassName: string;
  currentRowClassName: string;
  currentColClassName: string;
  selectionMode: 'single' | 'multiple';
  navigableHeaders: boolean;
  fillHandle: boolean;
  minSpareRows: number;
  minSpareCols: number;
  autoWrapRow: boolean;
  autoWrapCol: boolean;
  tableClassName?: string;
  ariaTags?: boolean;
  fragmentSelection?: boolean | 'cell';
  outsideClickDeselects?: boolean | ((target: HTMLElement) => boolean);
  observeDOMVisibility?: boolean;
  viewportRowRenderingOffset?: number | 'auto';
  viewportColumnRenderingOffset?: number | 'auto';
  nestedHeaders?: Array<Array<string | { label: string, colspan: number }>>;
  colHeaders?: string[];
  fixedRowsTop?: number;
  fixedRowsBottom?: number;
  mergeCells?: Array<{ row: number, col: number, rowspan: number, colspan: number }>;
  data?: any[][];
}

export interface Handsontable {
    dataType: string;
    runHooks(hookName: string, ...args: any[]): any;
    removeHook(key: string, callback: Function): void;
    render(): void;
    getSettings(): GridSettings;
    rootElement: HTMLElement;
    view: any;
    countCols(): number;
    countRows(): number;
    countSourceRows(): number;
    countSourceCols(): number;
    countRowHeaders(): number;
    hasHook(hookName: string): boolean;
    toPhysicalRow(row: number): number | null;
    toPhysicalColumn(column: number): number | null;
    toVisualRow(row: number): number | null;
    toVisualColumn(column: number): number | null;
    getInitialColumnCount(): number;
    getCellMeta(row: number, col: number): any;
    getDataAtCell(row: number, col: number): any;
    getDataAtRowProp(row: number, prop: PropDescriptor): any;
    getDataAtCol(col: number): any[];
    getSourceDataAtRow(row: number): any[] | Record<string, any>;
    isColumnModificationAllowed(): boolean;
    populateFromArray(row: number, col: number, input: any[], sourceStartRow?: number, sourceStartCol?: number, directVector?: string): any;
    forceFullRender: boolean;
    colToProp(column: number): any;
    getSchema(): any;
    isRtl(): boolean;
    getCellRenderer(cellMeta: any): Function;
    getCellEditor(cellMeta: any): any;
    rootDocument: Document;
    rootWindow: Window;
    container: HTMLElement;
    table: HTMLTableElement;
    isRenderSuspended(): boolean;
    renderCall: boolean;
    isDestroyed: boolean;
    isRtl(): boolean;
    countCols(): number;
    countRows(): number;
    getSettings(): GridSettings;
    getDataAtCell(row: number, col: number): any;
    getDataAtRowProp(row: number, prop: string): any;
    getColWidth(col: number): number;
    getRowHeight(row: number): number;
    getRowHeader(index: number): string;
    getColHeader(index: number): string;
    hasRowHeaders(): boolean;
    hasColHeaders(): boolean;
    getColumnMeta(col: number): { headerClassName?: string };
    getCellRenderer(cellProperties: any): Function;
    getActiveEditor(): { isOpened(): boolean } | null;
    runHooks(hookName: string, ...args: any[]): any;
    listen(): void;
    unlisten(): void;
    refreshDimensions(): void;
    destroyEditor(restoreOriginalValue?: boolean, prepare?: boolean): void;
    deselectCell(): void;
    getSelectedRangeLast(): { isSingleCell(): boolean } | null;
    selection: Selection;
    rowIndexMapper: IndexMapper;
    columnIndexMapper: IndexMapper;
    _createCellCoords(row: number, col: number): CellCoords;
    guid?: string;
    countRows(): number;
    listen(): void;
    isRtl(): boolean;
    getSelected(): any;
    getSelectedLast(): number[];
    getSettings(): any;
    getShortcutManager(): any;
    selectCell(row: number, col: number, endRow?: any, endCol?: any, scrollToCell?: any, changeListener?: boolean): boolean;
    isEditorOpened(): boolean;
    getCellValidator(cellProperties: CellProperties | null): any;
    runHooks(hookName: string, ...args: any[]): any;
    populateFromArray(row: number, col: number, value: any, endRow: number | null, endCol: number | null, source?: string): void;
    getSourceDataAtCell?(row: number, col: number): any;
    addHookOnce(hook: string, callback: (result?: any) => void): void;
  }
  