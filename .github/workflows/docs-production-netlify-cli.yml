name: Docs Production Deployment - Netlify CLI

env:
  NODE_VERSION: 20
  DOCSEARCH_API_KEY: ${{ secrets.DOCSEARCH_API_KEY }}
  DOCSEARCH_APP_ID: ${{ secrets.DOCSEARCH_APP_ID }}

on:
  push:
    branches:
      #!TODO remove feature branch after the merge
      - feature/dev-issue-1790
      - prod-docs/latest
  workflow_dispatch:

defaults:
  run:
    working-directory: ./docs/

jobs:
  netlify-deploy:
    name: Build Docs
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # https://github.com/actions/checkout/releases/tag/v4.1.1
      - name: Print the list of prod-docs branches without fetching
        run: git ls-remote --heads origin | awk '{print $2}' | sed 's/refs\/heads\///' | grep 'prod-docs/'

      - name: Set the latest version
        working-directory: ./  
        run: |
          latest_version=`git ls-remote --heads origin | awk '{print $2}' | sed 's/refs\/heads\///' | grep 'prod-docs/' | grep -oP '(?<=prod-docs/)\d+\.\d+' | awk 'max=="" || $1 > max {max=$1} END{print max}'`
          echo "$latest_version"
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Validate Docs version
        run: if [ -z "$LATEST_VERSION" ]; then echo "Docs version is empty"; exit 1; fi

      - name: Find team account ID
        run: |
          curl -X GET "https://api.netlify.com/api/v1/accounts/" \
          -H "Authorization: Bearer ${NETLIFY_AUTH_TOKEN}" \
          -H "Content-Type: application/json"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: List Environment Variables on Netlify
        run: |
          curl -X GET "https://api.netlify.com/api/v1/sites/${NETLIFY_SITE_ID}/env" \
          -H "Authorization: Bearer ${NETLIFY_AUTH_TOKEN}" \
          -H "Content-Type: application/json"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Update Environment Variables on Netlify
        run: |
          curl -X PATCH "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/env" \
          -H "Authorization: Bearer $NETLIFY_AUTH_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "values": [
              {
                "key": "LATEST_VERSION",
                "value": "'"$LATEST_VERSION"'"
              }
            ]
          }'
        env:
            NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
            LATEST_VERSION: ${{ env.LATEST_VERSION }}
            NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Remove local branch if it exists
        run: |
          git branch -D prod-docs/latest || true

      - name: Recreate the latest branch
        run: |
          git fetch origin prod-docs/$LATEST_VERSION
          git checkout origin/prod-docs/$LATEST_VERSION
          git checkout -b prod-docs/latest
          git push --force --set-upstream origin prod-docs/latest

      # this step includes source files, so it can be build even if the feature branch is not merged yet
      - name: Branch Patch
        run: |
          git fetch origin feature/dev-issue-1790
          git checkout feature/dev-issue-1790 ./docs/netlify ./docs/package.json ./docs/package-lock.json docs/.vuepress/theme/components/FrameworksDropdown.vue docs/.vuepress/helpers.js docs/.gitignore docs/netlify.toml
        working-directory: ./

      # Dynamically update netlify.toml with LATEST_VERSION
      - name: Update netlify.toml with LATEST_VERSION
        run: |
          echo '[context.production.environment]' >> netlify.toml
          echo 'LATEST_VERSION="${{ env.LATEST_VERSION }}"' >> netlify.toml
          echo '[context.dev.environment]' >> netlify.toml
          echo 'LATEST_VERSION="${{ env.LATEST_VERSION }}"' >> netlify.toml
          cat netlify.toml

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # https://github.com/actions/setup-node/releases/tag/v4.0.2
        with:
          # cache-dependency-path: ./latest/package-lock.json
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Dependencies
        run: |
          npm ci

      - name: Docs build
        run: |
          npm run docs:build:production:netlify
        working-directory: ./docs/

      - name: Install Netlify CLI
        run: npm install netlify-cli -g

      - name: Copy _redirects file
        run: |
          cp ./netlify/_redirects ./.vuepress/dist/docs/_redirects

      - name : Add changes to the commit
        run:  |
          git add .

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Docs: build production"
          commit_user_name: "Docs Deployment"
          commit_user_email: "docs-deployment@handsontable.com"

      - name: Deploy to Netlify
        run: |
          netlify env:set LATEST_VERSION=$LATEST_VERSION --context production
          netlify deploy --prod --prodIfUnlocked --dir .vuepress/dist/docs/
          netlify env:list
        env:
            NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
            NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
            LATEST_VERSION: ${{ env.LATEST_VERSION }}
            NETLIFY_CONTEXT: production
